var each_node = require('./lib/each_node'),
	copy = require('./lib/copy'),
	iter = require('./lib/iter'),
	parse = require('./lib/parse'),
	flatten_keys = require('./lib/flatten_keys'),
	unflatten_keys = require('./lib/unflatten_keys'),
	evaluate = require('./lib/evaluate'),
	get_keys = require('./lib/get_keys'),
	prev_open_tag = require('./lib/prev_open_tag')

var app = module.exports = { _bindings: {}, _scopes: {}}

app.view = function(expr) { return evaluate(expr, this) }

app.def = function() {
	var self = this
	// Set a key to a value
	if(arguments.length === 2) var obj = unflatten_keys(arguments[0], arguments[1])
	else var obj = arguments[0]

	for(var key in obj) {
		if(obj[key] && obj[key].constructor === Object && self[key] && self[key].constructor === Object) {
			if(self.hasOwnProperty(key))
				copy.deep(obj[key], self[key])
			else // Make a complete copy so we do not affect objects in parents and siblings
				self[key] = copy.deep(obj[key], copy.deep(self[key]))
		} else
			self[key] = obj[key]
	}

	iter.each(flatten_keys(obj), function(key) {
		if(self._bindings[key])
			iter.each(self._bindings[key], function(n) {
				var result = eval_comment(self, n)
			})
	})
	return self
}

app.def('set', function(key, val) { this.def(key, val) })

app.def('set_at', function(arr_key, index, val) {
	var arr = this.view(arr_key)
	copy.deep(val, arr[index])
	this.def(arr_key, arr)
})

app.def_lazy = function(key,fn) { this.def(key, {_lazy: fn}) }

app.render = function(node) {
	var self = this
	each_node(node, function(n) {
		var cont = true
		if(n.nodeType === 8 && n.textContent[0] === '=') { // nodeType 8 == comment
			var keys = get_keys(n.textContent.slice(1))
			iter.each(keys, function(k) {
				self._bindings[k] = self._bindings[k] || []
				if(self._bindings[k].indexOf(n) === -1) self._bindings[k].push(n)
			})
			var result = eval_comment(self, n)
			if(result && result.skip) cont = false
		}
		return cont
	})
	return self
}

function eval_comment(view, comment) {
	var prev_node = view.node, prev_comment = view.comment
	view.comment = comment
	view.node = prev_open_tag(comment)
	var result = evaluate(comment.textContent.slice(1), view)
	view.node = prev_node
	view.comment = prev_comment
	return result
}

app.clear_bindings = function() {this._bindings = {}; return this}

// Inherit a view & namespace the parent! TODO
app.scope = function(scope_name) {
	if(scope_name && this.comment && this.node) {
		var existing = this._scopes[scope_name]
		if(existing) existing.push(this.node)
		else this._scopes[scope_name] = [this.node]
		// We only need to save the scope once per pageload
		this.comment.parentNode.removeChild(this.comment)
		delete this._bindings['scope']
		return
	}

	var child_view = Object.create(this)
	child_view.parent = this
	child_view._bindings = {}

	if(scope_name && this._scopes[scope_name])
		iter.each(this._scopes[scope_name], function(el) { child_view.render(el) })
	else
		child_view._bindings = Object.create(this._bindings, {})

	return child_view
}

// Default view helpers

app.def('no_op', function() {})
app.def('id', function(x) {return x})

app.def("put", function(x) {
	if(x === undefined || x === null || x === NaN) return
	var interp = this.comment.nextSibling
	if(!interp || interp.className !== 'deja-put') {
		interp = document.createElement('span')
		interp.className = 'deja-put'
		this.comment.parentNode.insertBefore(interp, this.comment.nextSibling)
	}
	interp.innerHTML = String(x)
	return x
})

// Array funcs

app.def('concat', function(arr1_key, arr2) {
	var arr1 = this.view(arr1_key)
	this.def(arr1_key, arr1.concat(arr2))
	return arr1
})

app.def('push', function(val, arr_key) {
	var arr = this.view(arr_key)
	if(!arr.length) arr = []
	arr.push(val)
	this.def(arr_key, arr)
})

app.def('pop', function(arr_key) {
	var arr = this.view(arr_key), val = arr.pop()
	this.def(arr_key, arr)
	return val
})

app.def('show_if', function(pred) {
	if(pred) this.node.style.display = ''
	else this.node.style.display = 'none'
})

app.def('hide_if', function(pred) {
	if(pred) this.node.style.display = 'none'
	else this.node.style.display = ''
})

app.def('repeat', function(arr) {
	var self = this
	self.node.style.display = 'none'
	self.node.removeChild(self.comment)

	if(self.node.parentNode.className.indexOf('deja-repeat') !== -1 || self.node.parentNode.children.length === 1) {
		var wrapper = self.node.parentNode
		wrapper.className += ' deja-repeat'
		while(wrapper.children.length > 1)
			wrapper.removeChild(wrapper.lastChild)
	} else {
		var wrapper = self.node.nextSibling
		if(!wrapper || wrapper.className !== 'deja-repeat') {
			wrapper = document.createElement('span')
			wrapper.className = 'deja-repeat'
			self.node.parentNode.insertBefore(wrapper, self.node.nextSibling)
		}

		else while(wrapper.firstChild)
			wrapper.removeChild(wrapper.firstChild)
	}

	iter.each(arr, function(x, i) {
		var cloned = self.node.cloneNode(true)
		cloned.style.display = ''
		var child = self.scope().clear_bindings().def('i', i).def('each', x).def(x).render(cloned)
		wrapper.appendChild(cloned)
	})

	self.node.insertBefore(self.comment, self.node.firstChild)
	return {skip: true}
})

app.def('add', function() { return sum(arguments) })
app.def('sub', function() { return diff(arguments) })
app.def('mul', function() { return prod(arguments) })
app.def('divide', function(x,y) { return x/y })

app.def('incr', function(key) {
	var val = Number(this.view(key))
	if(val === undefined) return
	this.def(key, val + 1)
	return this.view(key)
})

app.def('decr', function(key) {
	var val = Number(this.view(key))
	if(val === undefined) return
	this.def(key, val - 1)
	return val - 1
})

app.def('add_class', function(class_name) { add_class(this.node, class_name) })
app.def('remove_class', function(class_name) { remove_class(this.node, class_name) })

app.def('toggle_class', function(class_name) {
	if(this.node.className.indexOf(class_name) !== -1) remove_class(this.node, class_name)
	else add_class(this.node, class_name)
})

app.def('class_if', function(pred, class_name) {
	if(pred) add_class(this.node, class_name)
	else remove_class(this.node, class_name)
})

app.def('cat', function() {
	return iter.fold(arguments, '', function(str, term) { return str += term })
})

app.def_lazy('on', function(events) {
	if(!this.node) return
	var self = this, args = arguments, node = self.node, comment = self.comment

	events = this.view(events)
	if(!(events instanceof Array)) events = [events]

	iter.each(events, function(ev) {
		self.node['on' + ev] = function(e) {
			e.preventDefault()
			self.node = node
			self.comment = comment
			self.view(iter.slice(args, 1))
		}
	})
})

app.def('empty',  function(arr) { return !arr || !arr.length })
app.def('length', function(arr) { return (arr ? arr.length : 0) })
app.def('tail', function(arr) { return arr.slice(1) })
app.def('init', function(arr) { return arr.slice(0, arr.length-1) })
app.def('head', function(arr) {return arr[0]})
app.def('attr', function(key, val) { this.node.setAttribute(key, val) })
app.def('get_value', function() { return this.node.value })
app.def('reload', function() { window.location.reload() })
app.def('redirect', function(url) { window.location.href = url })
app.def('stringify', function(obj) { return JSON.stringify(obj) })
app.def('form_data', function() { return new FormData(this.node) })
app.def('log', function() { console.log.apply(console, arguments) })

app.def('set_value', function(val) {
	if(val === undefined || val === null) this.node.value = ''
	else this.node.value = val
})

app.def('form_object', function() {
	var result = {}
	each_node(this.node, function(n) {
		if(n.nodeType === 1 && (n.nodeName ===  'INPUT' || n.nodeName === 'TEXTAREA' || n.nodeName === 'SELECT') && n.hasAttribute('name')) {
			var name = n.getAttribute('name'), existing = result[n.getAttribute('name')]
			if(existing === undefined)
				result[name] = n.value
			else {
				if(result[name] instanceof Array) result[name].push(n.value)
				else result[name] = [result[name], n.value]
			}
		}
		return true
	})
	return result
})

app.def('toggle', function(key) {
	var existing = this.view(key)
	if(existing === undefined) {
		this.def(key, arguments[1])
		return
	}

	for(var i = 1; i < arguments.length; ++i) {
		if(existing === arguments[i]) {
			var index = (i+1) % arguments.length
			if(index === 0) index = 1
			this.def(key, arguments[index])
			return
		}
	}

	this.def(key, arguments[1])
})

app.def('css', function(style_rule, val) { this.node.style[style_rule] = val })

app.def_lazy('if', function(predicate, then_expr, else_expr) {
	if(this.view(predicate)) return this.view(then_expr)
	else return this.view(else_expr)
})

app.def_lazy('delay', function(ms, expr) {
	var self = this
	delay(self.view(ms), function() {self.view(expr)})
})

app.def('select_option', function(val) {
	var option = this.node.querySelector("option[value='" + val + "']")
	if(option) option.setAttribute('selected', 'selected')
})

app.def('not',  function(val) {return !val})
app.def('eq', function() { return compare(function(x, y) { return x == y }, arguments, this) })
app.def('<', function() { return compare(function(x, y) { return x < y }, arguments, this) })
app.def('>', function() { return compare(function(x, y) { return x > y }, arguments, this) })
app.def('<=', function() { return compare(function(x, y) { return x <= y }, arguments, this) })
app.def('>=', function() { return compare(function(x, y) { return x >= y }, arguments, this) })

app.def('all', function() {
	for(var i = 0; i < arguments.length; ++i) if(!arguments[i]) return false
	return arguments[arguments.length-1]
})

app.def('any', function() {
	for(var i = 0; i < arguments.length; ++i) if(arguments[i]) return arguments[i]
	return arguments[arguments.length-1]
})

app.def('obj_to_url_params', function(obj) {
	var str = ''
	for(var key in obj) str += '&' + key + '=' + obj[key]
	str = str.replace(/^&/, '?')
	return str
})

app.render(document.body)

// Utilities

function sum(ns) {return iter.fold(ns, 0, function(sum, n) {return sum+n})}

function diff(ns) {return iter.fold(ns, function(diff, n) {return diff-n})}

function prod(ns) {return iter.fold(ns, 1, function(prod, n) {return prod*n})}

function add_class(node, class_name) { if(node.className.indexOf(class_name) === -1) node.className += ' ' + class_name }

function remove_class(node, class_name) { node.className = node.className.replace(class_name, '') }

// N-ary general purpose comparator func
function compare(fn, args) {
	var last = args[0]
	for(var i = 1; i < args.length; ++i) {
		if(!fn(last, args[i])) return false
		last = args[i]
	} return true
}

var delay = (function() {
	var timer = 0
	return function(ms, callback) {
		clearTimeout(timer)
		timer = setTimeout(callback, ms)
	}
})()
